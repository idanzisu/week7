{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","React","useState","time","setTime","timerOn","setTimeOn","useEffect","interval","setInterval","prevTime","clearInterval","class","Math","floor","slice","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAmDeA,MAhDf,WAAgB,IAAD,EACaC,IAAMC,SAAS,GAD5B,mBACJC,EADI,KACEC,EADF,OAEkBH,IAAMC,UAAS,GAFjC,mBAEJG,EAFI,KAEKC,EAFL,KAmBX,OAfAL,IAAMM,WAAU,WACZ,IAAIC,EAAW,KAUf,OARIH,EACAG,EAAWC,aAAY,WACnBL,GAAQ,SAAAM,GAAQ,OAAIA,EAAW,QAChC,IAEHC,cAAcH,GAGX,kBAAMG,cAAcH,MAE5B,CAACH,IAGA,sBAAKO,MAAM,MAAX,UACI,yCACA,6BAAI,oGACJ,2CACA,sBAAKA,MAAM,OAAX,UACI,kCAAQ,IAAMC,KAAKC,MAAOX,EAAO,IAAS,KAAKY,OAAO,GAAtD,OACA,kCAAQ,IAAMF,KAAKC,MAAOX,EAAO,IAAQ,KAAKY,OAAO,GAArD,OACA,gCAAQ,IAAQZ,EAAO,GAAM,KAAMY,OAAO,QAE9C,uBACA,iCACMV,GACE,wBAAQW,QAAS,kBAAMV,GAAU,IAAjC,mBAEHD,GACG,wBAAQW,QAAS,kBAAMV,GAAU,IAAjC,kBAGJ,wBAAQU,QAAS,kBAAMZ,EAAQ,IAA/B,0BC7BDa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.c15bc98a.chunk.js","sourcesContent":["import React from \"react\"\nimport './App.css';\n\nfunction App() {\n    const [time, setTime] = React.useState(0)\n    const [timerOn, setTimeOn] = React.useState(false)\n\n    React.useEffect(() => {\n        let interval = null;\n\n        if (timerOn) {\n            interval = setInterval(() => {\n                setTime(prevTime => prevTime + 10)\n            }, 10)\n        } else {\n            clearInterval(interval)\n        }\n\n        return () => clearInterval(interval)\n\n    }, [timerOn])\n\n    return (\n        <div class=\"App\">\n            <h1>Running</h1>\n            <h2><i>It's not the distance you must conquer in running, it's yourself.</i></h2>\n            <h4>Stopwatch</h4>\n            <div class=\"time\">\n                <span>{(\"0\" + Math.floor((time / 60000) % 60)).slice(-2)}:</span>\n                <span>{(\"0\" + Math.floor((time / 1000) % 60)).slice(-2)}:</span>\n                <span>{(\"0\" + ((time / 10) % 100)).slice(-2)}</span>\n            </div>\n            <br></br>\n            <div>\n                {!timerOn && (\n                    <button onClick={() => setTimeOn(true)}>Start</button>\n                )}\n                {timerOn && (\n                    <button onClick={() => setTimeOn(false)}>Stop</button>\n                )}\n\n                <button onClick={() => setTime(0)}>Reset</button>\n            </div>\n        </div>\n    );\n}\n\n<script>\n    document.getElementById(\"button\").style.color = \"blue\";\n</script>\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}